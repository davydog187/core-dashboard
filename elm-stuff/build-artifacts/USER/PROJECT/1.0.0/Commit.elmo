Elm.Commit = Elm.Commit || {};
Elm.Commit.make = function (_elm) {
   "use strict";
   _elm.Commit = _elm.Commit || {};
   if (_elm.Commit.values)
   return _elm.Commit.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Commit",
   $Basics = Elm.Basics.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var confirmedView = function (commit) {
      return A2($Html.div,
      _L.fromArray([$Html$Attributes.$class("commit")]),
      _L.fromArray([A2($Html.span,
      _L.fromArray([]),
      _L.fromArray([$Html.text(commit.message)]))]));
   };
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "QAConfirmed":
            return _U.replace([["confirmed"
                               ,true]],
              model);}
         _U.badCase($moduleName,
         "between lines 19 and 20");
      }();
   });
   var QAConfirmed = {ctor: "QAConfirmed"};
   var awaitingQAView = F2(function (address,
   commit) {
      return A2($Html.div,
      _L.fromArray([$Html$Attributes.$class("commit")]),
      _L.fromArray([A2($Html.span,
                   _L.fromArray([]),
                   _L.fromArray([$Html.text(commit.message)]))
                   ,A2($Html.button,
                   _L.fromArray([A2($Html$Events.onClick,
                   address,
                   QAConfirmed)]),
                   _L.fromArray([$Html.text("QA Confirmed")]))]));
   });
   var view = F2(function (address,
   commit) {
      return function () {
         var _v1 = commit.confirmed;
         switch (_v1)
         {case false:
            return A2(awaitingQAView,
              address,
              commit);
            case true:
            return confirmedView(commit);}
         _U.badCase($moduleName,
         "between lines 24 and 26");
      }();
   });
   var init = function (message) {
      return {_: {}
             ,confirmed: false
             ,message: message};
   };
   var Model = F2(function (a,b) {
      return {_: {}
             ,confirmed: b
             ,message: a};
   });
   _elm.Commit.values = {_op: _op
                        ,update: update
                        ,init: init
                        ,view: view
                        ,Model: Model};
   return _elm.Commit.values;
};